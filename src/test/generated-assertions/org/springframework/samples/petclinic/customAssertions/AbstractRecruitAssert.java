package org.springframework.samples.petclinic.customAssertions;

import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.AbstractBaseEntityAssert;
import org.springframework.samples.petclinic.model.Recruit;

/**
 * Abstract base class for {@link Recruit} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRecruitAssert<S extends AbstractRecruitAssert<S, A>, A extends Recruit> extends AbstractBaseEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRecruitAssert}</code> to make assertions on actual Recruit.
   * @param actual the Recruit we want to make assertions on.
   */
  protected AbstractRecruitAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Recruit's forSale is equal to the given one.
   * @param forSale the given forSale to compare the actual Recruit's forSale to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Recruit's forSale is not equal to the given one.
   */
  public S hasForSale(Boolean forSale) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting forSale of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualForSale = actual.getForSale();
    if (!Objects.areEqual(actualForSale, forSale)) {
      failWithMessage(assertjErrorMessage, actual, forSale, actualForSale);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's lineup1 contains the given Lineup elements.
   * @param lineup1 the given elements that should be contained in actual Recruit's lineup1.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup1 does not contain all given Lineup elements.
   */
  public S hasLineup1(Lineup... lineup1) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup varargs is not null.
    if (lineup1 == null) failWithMessage("Expecting lineup1 parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getLineup1(), lineup1);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's lineup1 contains the given Lineup elements in Collection.
   * @param lineup1 the given elements that should be contained in actual Recruit's lineup1.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup1 does not contain all given Lineup elements.
   */
  public S hasLineup1(java.util.Collection<? extends Lineup> lineup1) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup collection is not null.
    if (lineup1 == null) {
      failWithMessage("Expecting lineup1 parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getLineup1(), lineup1.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's lineup1 contains <b>only</b> the given Lineup elements and nothing else in whatever order.
   * @param lineup1 the given elements that should be contained in actual Recruit's lineup1.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup1 does not contain all given Lineup elements.
   */
  public S hasOnlyLineup1(Lineup... lineup1) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup varargs is not null.
    if (lineup1 == null) failWithMessage("Expecting lineup1 parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getLineup1(), lineup1);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's lineup1 contains <b>only</b> the given Lineup elements in Collection and nothing else in whatever order.
   * @param lineup1 the given elements that should be contained in actual Recruit's lineup1.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup1 does not contain all given Lineup elements.
   */
  public S hasOnlyLineup1(java.util.Collection<? extends Lineup> lineup1) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup collection is not null.
    if (lineup1 == null) {
      failWithMessage("Expecting lineup1 parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getLineup1(), lineup1.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's lineup1 does not contain the given Lineup elements.
   *
   * @param lineup1 the given elements that should not be in actual Recruit's lineup1.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup1 contains any given Lineup elements.
   */
  public S doesNotHaveLineup1(Lineup... lineup1) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup varargs is not null.
    if (lineup1 == null) failWithMessage("Expecting lineup1 parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getLineup1(), lineup1);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's lineup1 does not contain the given Lineup elements in Collection.
   *
   * @param lineup1 the given elements that should not be in actual Recruit's lineup1.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup1 contains any given Lineup elements.
   */
  public S doesNotHaveLineup1(java.util.Collection<? extends Lineup> lineup1) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup collection is not null.
    if (lineup1 == null) {
      failWithMessage("Expecting lineup1 parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getLineup1(), lineup1.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit has no lineup1.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup1 is not empty.
   */
  public S hasNoLineup1() {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have lineup1 but had :\n  <%s>";

    // check
    if (actual.getLineup1().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getLineup1());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Recruit's lineup2 contains the given Lineup elements.
   * @param lineup2 the given elements that should be contained in actual Recruit's lineup2.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup2 does not contain all given Lineup elements.
   */
  public S hasLineup2(Lineup... lineup2) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup varargs is not null.
    if (lineup2 == null) failWithMessage("Expecting lineup2 parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getLineup2(), lineup2);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's lineup2 contains the given Lineup elements in Collection.
   * @param lineup2 the given elements that should be contained in actual Recruit's lineup2.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup2 does not contain all given Lineup elements.
   */
  public S hasLineup2(java.util.Collection<? extends Lineup> lineup2) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup collection is not null.
    if (lineup2 == null) {
      failWithMessage("Expecting lineup2 parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getLineup2(), lineup2.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's lineup2 contains <b>only</b> the given Lineup elements and nothing else in whatever order.
   * @param lineup2 the given elements that should be contained in actual Recruit's lineup2.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup2 does not contain all given Lineup elements.
   */
  public S hasOnlyLineup2(Lineup... lineup2) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup varargs is not null.
    if (lineup2 == null) failWithMessage("Expecting lineup2 parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getLineup2(), lineup2);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's lineup2 contains <b>only</b> the given Lineup elements in Collection and nothing else in whatever order.
   * @param lineup2 the given elements that should be contained in actual Recruit's lineup2.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup2 does not contain all given Lineup elements.
   */
  public S hasOnlyLineup2(java.util.Collection<? extends Lineup> lineup2) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup collection is not null.
    if (lineup2 == null) {
      failWithMessage("Expecting lineup2 parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getLineup2(), lineup2.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's lineup2 does not contain the given Lineup elements.
   *
   * @param lineup2 the given elements that should not be in actual Recruit's lineup2.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup2 contains any given Lineup elements.
   */
  public S doesNotHaveLineup2(Lineup... lineup2) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup varargs is not null.
    if (lineup2 == null) failWithMessage("Expecting lineup2 parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getLineup2(), lineup2);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's lineup2 does not contain the given Lineup elements in Collection.
   *
   * @param lineup2 the given elements that should not be in actual Recruit's lineup2.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup2 contains any given Lineup elements.
   */
  public S doesNotHaveLineup2(java.util.Collection<? extends Lineup> lineup2) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Lineup collection is not null.
    if (lineup2 == null) {
      failWithMessage("Expecting lineup2 parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getLineup2(), lineup2.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit has no lineup2.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's lineup2 is not empty.
   */
  public S hasNoLineup2() {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have lineup2 but had :\n  <%s>";

    // check
    if (actual.getLineup2().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getLineup2());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Recruit's offer contains the given Offer elements.
   * @param offer the given elements that should be contained in actual Recruit's offer.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's offer does not contain all given Offer elements.
   */
  public S hasOffer(Offer... offer) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Offer varargs is not null.
    if (offer == null) failWithMessage("Expecting offer parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getOffer(), offer);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's offer contains the given Offer elements in Collection.
   * @param offer the given elements that should be contained in actual Recruit's offer.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's offer does not contain all given Offer elements.
   */
  public S hasOffer(java.util.Collection<? extends Offer> offer) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Offer collection is not null.
    if (offer == null) {
      failWithMessage("Expecting offer parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getOffer(), offer.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's offer contains <b>only</b> the given Offer elements and nothing else in whatever order.
   * @param offer the given elements that should be contained in actual Recruit's offer.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's offer does not contain all given Offer elements.
   */
  public S hasOnlyOffer(Offer... offer) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Offer varargs is not null.
    if (offer == null) failWithMessage("Expecting offer parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getOffer(), offer);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's offer contains <b>only</b> the given Offer elements in Collection and nothing else in whatever order.
   * @param offer the given elements that should be contained in actual Recruit's offer.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's offer does not contain all given Offer elements.
   */
  public S hasOnlyOffer(java.util.Collection<? extends Offer> offer) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Offer collection is not null.
    if (offer == null) {
      failWithMessage("Expecting offer parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getOffer(), offer.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's offer does not contain the given Offer elements.
   *
   * @param offer the given elements that should not be in actual Recruit's offer.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's offer contains any given Offer elements.
   */
  public S doesNotHaveOffer(Offer... offer) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Offer varargs is not null.
    if (offer == null) failWithMessage("Expecting offer parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getOffer(), offer);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's offer does not contain the given Offer elements in Collection.
   *
   * @param offer the given elements that should not be in actual Recruit's offer.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's offer contains any given Offer elements.
   */
  public S doesNotHaveOffer(java.util.Collection<? extends Offer> offer) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // check that given Offer collection is not null.
    if (offer == null) {
      failWithMessage("Expecting offer parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getOffer(), offer.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit has no offer.
   * @return this assertion object.
   * @throws AssertionError if the actual Recruit's offer is not empty.
   */
  public S hasNoOffer() {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have offer but had :\n  <%s>";

    // check
    if (actual.getOffer().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getOffer());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Recruit's pilot is equal to the given one.
   * @param pilot the given pilot to compare the actual Recruit's pilot to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Recruit's pilot is not equal to the given one.
   */
  public S hasPilot(org.springframework.samples.petclinic.model.Pilot pilot) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pilot of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Pilot actualPilot = actual.getPilot();
    if (!Objects.areEqual(actualPilot, pilot)) {
      failWithMessage(assertjErrorMessage, actual, pilot, actualPilot);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Recruit's team is equal to the given one.
   * @param team the given team to compare the actual Recruit's team to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Recruit's team is not equal to the given one.
   */
  public S hasTeam(org.springframework.samples.petclinic.model.Team team) {
    // check that actual Recruit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting team of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Team actualTeam = actual.getTeam();
    if (!Objects.areEqual(actualTeam, team)) {
      failWithMessage(assertjErrorMessage, actual, team, actualTeam);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
