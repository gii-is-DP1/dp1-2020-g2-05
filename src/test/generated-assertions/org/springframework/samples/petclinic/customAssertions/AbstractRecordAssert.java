package org.springframework.samples.petclinic.customAssertions;

import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.AbstractBaseEntityAssert;
import org.springframework.samples.petclinic.model.Record;

/**
 * Abstract base class for {@link Record} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRecordAssert<S extends AbstractRecordAssert<S, A>, A extends Record> extends AbstractBaseEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRecordAssert}</code> to make assertions on actual Record.
   * @param actual the Record we want to make assertions on.
   */
  protected AbstractRecordAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Record's mejorVuelta is equal to the given one.
   * @param mejorVuelta the given mejorVuelta to compare the actual Record's mejorVuelta to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Record's mejorVuelta is not equal to the given one.
   */
  public S hasMejorVuelta(org.springframework.samples.petclinic.model.RecordMejorVuelta mejorVuelta) {
    // check that actual Record we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting mejorVuelta of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.RecordMejorVuelta actualMejorVuelta = actual.getMejorVuelta();
    if (!Objects.areEqual(actualMejorVuelta, mejorVuelta)) {
      failWithMessage(assertjErrorMessage, actual, mejorVuelta, actualMejorVuelta);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Record's recordDelCircuito is equal to the given one.
   * @param recordDelCircuito the given recordDelCircuito to compare the actual Record's recordDelCircuito to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Record's recordDelCircuito is not equal to the given one.
   */
  public S hasRecordDelCircuito(org.springframework.samples.petclinic.model.RecordCircuito recordDelCircuito) {
    // check that actual Record we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting recordDelCircuito of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.RecordCircuito actualRecordDelCircuito = actual.getRecordDelCircuito();
    if (!Objects.areEqual(actualRecordDelCircuito, recordDelCircuito)) {
      failWithMessage(assertjErrorMessage, actual, recordDelCircuito, actualRecordDelCircuito);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Record's vueltaDePole is equal to the given one.
   * @param vueltaDePole the given vueltaDePole to compare the actual Record's vueltaDePole to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Record's vueltaDePole is not equal to the given one.
   */
  public S hasVueltaDePole(org.springframework.samples.petclinic.model.RecordPole vueltaDePole) {
    // check that actual Record we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting vueltaDePole of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.RecordPole actualVueltaDePole = actual.getVueltaDePole();
    if (!Objects.areEqual(actualVueltaDePole, vueltaDePole)) {
      failWithMessage(assertjErrorMessage, actual, vueltaDePole, actualVueltaDePole);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Record's vueltaRapida is equal to the given one.
   * @param vueltaRapida the given vueltaRapida to compare the actual Record's vueltaRapida to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Record's vueltaRapida is not equal to the given one.
   */
  public S hasVueltaRapida(org.springframework.samples.petclinic.model.RecordVueltaRapida vueltaRapida) {
    // check that actual Record we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting vueltaRapida of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.RecordVueltaRapida actualVueltaRapida = actual.getVueltaRapida();
    if (!Objects.areEqual(actualVueltaRapida, vueltaRapida)) {
      failWithMessage(assertjErrorMessage, actual, vueltaRapida, actualVueltaRapida);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Record's gp is equal to the given one.
   * @param gp the given gp to compare the actual Record's gp to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Record's gp is not equal to the given one.
   */
  public S hasGp(org.springframework.samples.petclinic.model.GranPremio gp) {
    // check that actual Record we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting gp of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.GranPremio actualGp = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("gp", org.springframework.samples.petclinic.model.GranPremio.class, actual);
    if (!Objects.areEqual(actualGp, gp)) {
      failWithMessage(assertjErrorMessage, actual, gp, actualGp);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
