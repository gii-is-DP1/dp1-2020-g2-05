package org.springframework.samples.dreamgp.autoGeneratedAssertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.dreamgp.model.BDCarrera;

/**
 * Abstract base class for {@link BDCarrera} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractBDCarreraAssert<S extends AbstractBDCarreraAssert<S, A>, A extends BDCarrera> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractBDCarreraAssert}</code> to make assertions on actual BDCarrera.
   * @param actual the BDCarrera we want to make assertions on.
   */
  protected AbstractBDCarreraAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual BDCarrera's category is equal to the given one.
   * @param category the given category to compare the actual BDCarrera's category to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BDCarrera's category is not equal to the given one.
   */
  public S hasCategory(org.springframework.samples.dreamgp.model.Category category) {
    // check that actual BDCarrera we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting category of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.dreamgp.model.Category actualCategory = actual.getCategory();
    if (!Objects.areEqual(actualCategory, category)) {
      failWithMessage(assertjErrorMessage, actual, category, actualCategory);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BDCarrera's racecode is equal to the given one.
   * @param racecode the given racecode to compare the actual BDCarrera's racecode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BDCarrera's racecode is not equal to the given one.
   */
  public S hasRacecode(motogpApiV2.RaceCode racecode) {
    // check that actual BDCarrera we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting racecode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    motogpApiV2.RaceCode actualRacecode = actual.getRacecode();
    if (!Objects.areEqual(actualRacecode, racecode)) {
      failWithMessage(assertjErrorMessage, actual, racecode, actualRacecode);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BDCarrera's session is equal to the given one.
   * @param session the given session to compare the actual BDCarrera's session to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BDCarrera's session is not equal to the given one.
   */
  public S hasSession(motogpApiV2.Session session) {
    // check that actual BDCarrera we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting session of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    motogpApiV2.Session actualSession = actual.getSession();
    if (!Objects.areEqual(actualSession, session)) {
      failWithMessage(assertjErrorMessage, actual, session, actualSession);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BDCarrera's year is equal to the given one.
   * @param year the given year to compare the actual BDCarrera's year to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BDCarrera's year is not equal to the given one.
   */
  public S hasYear(Integer year) {
    // check that actual BDCarrera we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting year of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualYear = actual.getYear();
    if (!Objects.areEqual(actualYear, year)) {
      failWithMessage(assertjErrorMessage, actual, year, actualYear);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BDCarrera's fecha is equal to the given one.
   * @param fecha the given fecha to compare the actual BDCarrera's fecha to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BDCarrera's fecha is not equal to the given one.
   */
  public S hasFecha(java.util.Calendar fecha) {
    // check that actual BDCarrera we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting fecha of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Calendar actualFecha = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("fecha", java.util.Calendar.class, actual);
    if (!Objects.areEqual(actualFecha, fecha)) {
      failWithMessage(assertjErrorMessage, actual, fecha, actualFecha);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
