package org.springframework.samples.dreamgp.entryPointsForAssertions;

import org.springframework.samples.dreamgp.autoGeneratedAssertions.AuthoritiesAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.BDCarreraAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.BaseEntityAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.CategoryAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.FormRellenarBDAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.GranPremioAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.LeagueAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.LineupAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.LineupTestsAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.MessageAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.NamedEntityAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.OfferAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.PersonAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.PilotAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.RecordAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.RecordCircuitoAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.RecordMejorVueltaAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.RecordPoleAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.RecordVueltaRapidaAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.RecruitAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.ResultAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.StatusAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.TablaConsultasAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.TeamAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.TeamModelTestAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.TransactionAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.UserAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.UserRevEntityAssert;
import org.springframework.samples.dreamgp.autoGeneratedAssertions.UserRevisionListenerAssert;
import org.springframework.samples.dreamgp.model.Authorities;
import org.springframework.samples.dreamgp.model.BDCarrera;
import org.springframework.samples.dreamgp.model.BaseEntity;
import org.springframework.samples.dreamgp.model.Category;
import org.springframework.samples.dreamgp.model.FormRellenarBD;
import org.springframework.samples.dreamgp.model.GranPremio;
import org.springframework.samples.dreamgp.model.League;
import org.springframework.samples.dreamgp.model.Lineup;
import org.springframework.samples.dreamgp.model.LineupTests;
import org.springframework.samples.dreamgp.model.Message;
import org.springframework.samples.dreamgp.model.NamedEntity;
import org.springframework.samples.dreamgp.model.Offer;
import org.springframework.samples.dreamgp.model.Person;
import org.springframework.samples.dreamgp.model.Pilot;
import org.springframework.samples.dreamgp.model.Record;
import org.springframework.samples.dreamgp.model.RecordCircuito;
import org.springframework.samples.dreamgp.model.RecordMejorVuelta;
import org.springframework.samples.dreamgp.model.RecordPole;
import org.springframework.samples.dreamgp.model.RecordVueltaRapida;
import org.springframework.samples.dreamgp.model.Recruit;
import org.springframework.samples.dreamgp.model.Result;
import org.springframework.samples.dreamgp.model.Status;
import org.springframework.samples.dreamgp.model.TablaConsultas;
import org.springframework.samples.dreamgp.model.Team;
import org.springframework.samples.dreamgp.model.TeamModelTest;
import org.springframework.samples.dreamgp.model.Transaction;
import org.springframework.samples.dreamgp.model.User;
import org.springframework.samples.dreamgp.model.audit.UserRevEntity;
import org.springframework.samples.dreamgp.model.audit.UserRevisionListener;
/**
 * Entry point for BDD assertions of different data types.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class BddAssertions {

  /**
   * Creates a new instance of <code>{@link AuthoritiesAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static AuthoritiesAssert then(Authorities actual) {
    return new AuthoritiesAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link BDCarreraAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static BDCarreraAssert then(BDCarrera actual) {
    return new BDCarreraAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link BaseEntityAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static BaseEntityAssert then(BaseEntity actual) {
    return new BaseEntityAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link CategoryAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static CategoryAssert then(Category actual) {
    return new CategoryAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link FormRellenarBDAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static FormRellenarBDAssert then(FormRellenarBD actual) {
    return new FormRellenarBDAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link GranPremioAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static GranPremioAssert then(GranPremio actual) {
    return new GranPremioAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link LeagueAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static LeagueAssert then(League actual) {
    return new LeagueAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link LineupAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static LineupAssert then(Lineup actual) {
    return new LineupAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link LineupTestsAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static LineupTestsAssert then(LineupTests actual) {
    return new LineupTestsAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link MessageAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static MessageAssert then(Message actual) {
    return new MessageAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link NamedEntityAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static NamedEntityAssert then(NamedEntity actual) {
    return new NamedEntityAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link OfferAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static OfferAssert then(Offer actual) {
    return new OfferAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link PersonAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static PersonAssert then(Person actual) {
    return new PersonAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link PilotAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static PilotAssert then(Pilot actual) {
    return new PilotAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link RecordAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static RecordAssert then(Record actual) {
    return new RecordAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link RecordCircuitoAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static RecordCircuitoAssert then(RecordCircuito actual) {
    return new RecordCircuitoAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link RecordMejorVueltaAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static RecordMejorVueltaAssert then(RecordMejorVuelta actual) {
    return new RecordMejorVueltaAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link RecordPoleAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static RecordPoleAssert then(RecordPole actual) {
    return new RecordPoleAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link RecordVueltaRapidaAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static RecordVueltaRapidaAssert then(RecordVueltaRapida actual) {
    return new RecordVueltaRapidaAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link RecruitAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static RecruitAssert then(Recruit actual) {
    return new RecruitAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link ResultAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static ResultAssert then(Result actual) {
    return new ResultAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link StatusAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static StatusAssert then(Status actual) {
    return new StatusAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link TablaConsultasAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static TablaConsultasAssert then(TablaConsultas actual) {
    return new TablaConsultasAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link TeamAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static TeamAssert then(Team actual) {
    return new TeamAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link TeamModelTestAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static TeamModelTestAssert then(TeamModelTest actual) {
    return new TeamModelTestAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link TeamValidatorTestsAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */

  /**
   * Creates a new instance of <code>{@link TransactionAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static TransactionAssert then(Transaction actual) {
    return new TransactionAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link TransactionTypeAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */


  /**
   * Creates a new instance of <code>{@link UserAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static UserAssert then(User actual) {
    return new UserAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link UserRevEntityAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static UserRevEntityAssert then(UserRevEntity actual) {
    return new UserRevEntityAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link UserRevisionListenerAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public static UserRevisionListenerAssert then(UserRevisionListener actual) {
    return new UserRevisionListenerAssert(actual);
  }

  /**
   * Creates a new <code>{@link BddAssertions}</code>.
   */
  protected BddAssertions() {
    // empty
  }
}
