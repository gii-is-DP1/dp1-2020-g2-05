package org.springframework.samples.petclinic.autoGeneratedAssertions;

import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Transaction;

/**
 * Abstract base class for {@link Transaction} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractTransactionAssert<S extends AbstractTransactionAssert<S, A>, A extends Transaction> extends AbstractBaseEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractTransactionAssert}</code> to make assertions on actual Transaction.
   * @param actual the Transaction we want to make assertions on.
   */
  protected AbstractTransactionAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Transaction's amount is equal to the given one.
   * @param amount the given amount to compare the actual Transaction's amount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Transaction's amount is not equal to the given one.
   */
  public S hasAmount(Integer amount) {
    // check that actual Transaction we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting amount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualAmount = actual.getAmount();
    if (!Objects.areEqual(actualAmount, amount)) {
      failWithMessage(assertjErrorMessage, actual, amount, actualAmount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Transaction's concept is equal to the given one.
   * @param concept the given concept to compare the actual Transaction's concept to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Transaction's concept is not equal to the given one.
   */
  public S hasConcept(String concept) {
    // check that actual Transaction we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting concept of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualConcept = actual.getConcept();
    if (!Objects.areEqual(actualConcept, concept)) {
      failWithMessage(assertjErrorMessage, actual, concept, actualConcept);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Transaction's date is equal to the given one.
   * @param date the given date to compare the actual Transaction's date to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Transaction's date is not equal to the given one.
   */
  public S hasDate(java.time.LocalDate date) {
    // check that actual Transaction we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting date of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualDate = actual.getDate();
    if (!Objects.areEqual(actualDate, date)) {
      failWithMessage(assertjErrorMessage, actual, date, actualDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Transaction's remainingMoney is equal to the given one.
   * @param remainingMoney the given remainingMoney to compare the actual Transaction's remainingMoney to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Transaction's remainingMoney is not equal to the given one.
   */
  public S hasRemainingMoney(Integer remainingMoney) {
    // check that actual Transaction we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting remainingMoney of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualRemainingMoney = actual.getRemainingMoney();
    if (!Objects.areEqual(actualRemainingMoney, remainingMoney)) {
      failWithMessage(assertjErrorMessage, actual, remainingMoney, actualRemainingMoney);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Transaction's team is equal to the given one.
   * @param team the given team to compare the actual Transaction's team to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Transaction's team is not equal to the given one.
   */
  public S hasTeam(org.springframework.samples.petclinic.model.Team team) {
    // check that actual Transaction we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting team of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Team actualTeam = actual.getTeam();
    if (!Objects.areEqual(actualTeam, team)) {
      failWithMessage(assertjErrorMessage, actual, team, actualTeam);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
