package org.springframework.samples.petclinic.autoGeneratedAssertions;

import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.*;
import org.springframework.samples.petclinic.model.TablaConsultas;

/**
 * Abstract base class for {@link TablaConsultas} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractTablaConsultasAssert<S extends AbstractTablaConsultasAssert<S, A>, A extends TablaConsultas> extends AbstractBaseEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractTablaConsultasAssert}</code> to make assertions on actual TablaConsultas.
   * @param actual the TablaConsultas we want to make assertions on.
   */
  protected AbstractTablaConsultasAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual TablaConsultas's actualRace is equal to the given one.
   * @param actualRace the given actualRace to compare the actual TablaConsultas's actualRace to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TablaConsultas's actualRace is not equal to the given one.
   */
  public S hasActualRace(Integer actualRace) {
    // check that actual TablaConsultas we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting actualRace of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualActualRace = actual.getActualRace();
    if (!Objects.areEqual(actualActualRace, actualRace)) {
      failWithMessage(assertjErrorMessage, actual, actualRace, actualActualRace);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual TablaConsultas's currentCategory is equal to the given one.
   * @param currentCategory the given currentCategory to compare the actual TablaConsultas's currentCategory to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TablaConsultas's currentCategory is not equal to the given one.
   */
  public S hasCurrentCategory(org.springframework.samples.petclinic.model.Category currentCategory) {
    // check that actual TablaConsultas we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting currentCategory of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.Category actualCurrentCategory = actual.getCurrentCategory();
    if (!Objects.areEqual(actualCurrentCategory, currentCategory)) {
      failWithMessage(assertjErrorMessage, actual, currentCategory, actualCurrentCategory);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual TablaConsultas's racesCompleted is equal to the given one.
   * @param racesCompleted the given racesCompleted to compare the actual TablaConsultas's racesCompleted to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TablaConsultas's racesCompleted is not equal to the given one.
   */
  public S hasRacesCompleted(Integer racesCompleted) {
    // check that actual TablaConsultas we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting racesCompleted of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualRacesCompleted = actual.getRacesCompleted();
    if (!Objects.areEqual(actualRacesCompleted, racesCompleted)) {
      failWithMessage(assertjErrorMessage, actual, racesCompleted, actualRacesCompleted);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
