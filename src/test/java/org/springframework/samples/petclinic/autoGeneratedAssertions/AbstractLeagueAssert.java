package org.springframework.samples.petclinic.autoGeneratedAssertions;

import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.League;
import org.springframework.samples.petclinic.model.Team;

/**
 * Abstract base class for {@link League} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractLeagueAssert<S extends AbstractLeagueAssert<S, A>, A extends League> extends AbstractNamedEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractLeagueAssert}</code> to make assertions on actual League.
   * @param actual the League we want to make assertions on.
   */
  protected AbstractLeagueAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual League's leagueCode is equal to the given one.
   * @param leagueCode the given leagueCode to compare the actual League's leagueCode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual League's leagueCode is not equal to the given one.
   */
  public S hasLeagueCode(String leagueCode) {
    // check that actual League we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting leagueCode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLeagueCode = actual.getLeagueCode();
    if (!Objects.areEqual(actualLeagueCode, leagueCode)) {
      failWithMessage(assertjErrorMessage, actual, leagueCode, actualLeagueCode);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual League's leagueDate is equal to the given one.
   * @param leagueDate the given leagueDate to compare the actual League's leagueDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual League's leagueDate is not equal to the given one.
   */
  public S hasLeagueDate(String leagueDate) {
    // check that actual League we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting leagueDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLeagueDate = actual.getLeagueDate();
    if (!Objects.areEqual(actualLeagueDate, leagueDate)) {
      failWithMessage(assertjErrorMessage, actual, leagueDate, actualLeagueDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual League's team contains the given Team elements.
   * @param team the given elements that should be contained in actual League's team.
   * @return this assertion object.
   * @throws AssertionError if the actual League's team does not contain all given Team elements.
   */
  public S hasTeam(Team... team) {
    // check that actual League we want to make assertions on is not null.
    isNotNull();

    // check that given Team varargs is not null.
    if (team == null) failWithMessage("Expecting team parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTeam(), team);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual League's team contains the given Team elements in Collection.
   * @param team the given elements that should be contained in actual League's team.
   * @return this assertion object.
   * @throws AssertionError if the actual League's team does not contain all given Team elements.
   */
  public S hasTeam(java.util.Collection<? extends Team> team) {
    // check that actual League we want to make assertions on is not null.
    isNotNull();

    // check that given Team collection is not null.
    if (team == null) {
      failWithMessage("Expecting team parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTeam(), team.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual League's team contains <b>only</b> the given Team elements and nothing else in whatever order.
   * @param team the given elements that should be contained in actual League's team.
   * @return this assertion object.
   * @throws AssertionError if the actual League's team does not contain all given Team elements.
   */
  public S hasOnlyTeam(Team... team) {
    // check that actual League we want to make assertions on is not null.
    isNotNull();

    // check that given Team varargs is not null.
    if (team == null) failWithMessage("Expecting team parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTeam(), team);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual League's team contains <b>only</b> the given Team elements in Collection and nothing else in whatever order.
   * @param team the given elements that should be contained in actual League's team.
   * @return this assertion object.
   * @throws AssertionError if the actual League's team does not contain all given Team elements.
   */
  public S hasOnlyTeam(java.util.Collection<? extends Team> team) {
    // check that actual League we want to make assertions on is not null.
    isNotNull();

    // check that given Team collection is not null.
    if (team == null) {
      failWithMessage("Expecting team parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTeam(), team.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual League's team does not contain the given Team elements.
   *
   * @param team the given elements that should not be in actual League's team.
   * @return this assertion object.
   * @throws AssertionError if the actual League's team contains any given Team elements.
   */
  public S doesNotHaveTeam(Team... team) {
    // check that actual League we want to make assertions on is not null.
    isNotNull();

    // check that given Team varargs is not null.
    if (team == null) failWithMessage("Expecting team parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTeam(), team);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual League's team does not contain the given Team elements in Collection.
   *
   * @param team the given elements that should not be in actual League's team.
   * @return this assertion object.
   * @throws AssertionError if the actual League's team contains any given Team elements.
   */
  public S doesNotHaveTeam(java.util.Collection<? extends Team> team) {
    // check that actual League we want to make assertions on is not null.
    isNotNull();

    // check that given Team collection is not null.
    if (team == null) {
      failWithMessage("Expecting team parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTeam(), team.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual League has no team.
   * @return this assertion object.
   * @throws AssertionError if the actual League's team is not empty.
   */
  public S hasNoTeam() {
    // check that actual League we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have team but had :\n  <%s>";

    // check
    if (actual.getTeam().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTeam());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
