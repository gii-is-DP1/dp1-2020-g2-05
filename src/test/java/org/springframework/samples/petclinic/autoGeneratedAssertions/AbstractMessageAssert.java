package org.springframework.samples.petclinic.autoGeneratedAssertions;

import org.assertj.core.util.Objects;
import org.springframework.samples.petclinic.model.Message;

/**
 * Abstract base class for {@link Message} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractMessageAssert<S extends AbstractMessageAssert<S, A>, A extends Message> extends AbstractBaseEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractMessageAssert}</code> to make assertions on actual Message.
   * @param actual the Message we want to make assertions on.
   */
  protected AbstractMessageAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Message's asunto is equal to the given one.
   * @param asunto the given asunto to compare the actual Message's asunto to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Message's asunto is not equal to the given one.
   */
  public S hasAsunto(String asunto) {
    // check that actual Message we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asunto of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualAsunto = actual.getAsunto();
    if (!Objects.areEqual(actualAsunto, asunto)) {
      failWithMessage(assertjErrorMessage, actual, asunto, actualAsunto);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Message's cuerpo is equal to the given one.
   * @param cuerpo the given cuerpo to compare the actual Message's cuerpo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Message's cuerpo is not equal to the given one.
   */
  public S hasCuerpo(String cuerpo) {
    // check that actual Message we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cuerpo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCuerpo = actual.getCuerpo();
    if (!Objects.areEqual(actualCuerpo, cuerpo)) {
      failWithMessage(assertjErrorMessage, actual, cuerpo, actualCuerpo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Message's usernamereceive is equal to the given one.
   * @param usernamereceive the given usernamereceive to compare the actual Message's usernamereceive to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Message's usernamereceive is not equal to the given one.
   */
  public S hasUsernamereceive(org.springframework.samples.petclinic.model.User usernamereceive) {
    // check that actual Message we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting usernamereceive of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.User actualUsernamereceive = actual.getUsernamereceive();
    if (!Objects.areEqual(actualUsernamereceive, usernamereceive)) {
      failWithMessage(assertjErrorMessage, actual, usernamereceive, actualUsernamereceive);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Message's usernamesend is equal to the given one.
   * @param usernamesend the given usernamesend to compare the actual Message's usernamesend to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Message's usernamesend is not equal to the given one.
   */
  public S hasUsernamesend(org.springframework.samples.petclinic.model.User usernamesend) {
    // check that actual Message we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting usernamesend of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.petclinic.model.User actualUsernamesend = actual.getUsernamesend();
    if (!Objects.areEqual(actualUsernamesend, usernamesend)) {
      failWithMessage(assertjErrorMessage, actual, usernamesend, actualUsernamesend);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Message's visto is equal to the given one.
   * @param visto the given visto to compare the actual Message's visto to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Message's visto is not equal to the given one.
   */
  public S hasVisto(Integer visto) {
    // check that actual Message we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting visto of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualVisto = actual.getVisto();
    if (!Objects.areEqual(actualVisto, visto)) {
      failWithMessage(assertjErrorMessage, actual, visto, actualVisto);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
